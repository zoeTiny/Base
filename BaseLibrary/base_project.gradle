/*
 *  Copyright (C) 2015 Rayman Yan
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */

import java.text.SimpleDateFormat

apply plugin: 'com.android.application'

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    lintOptions {
        checkReleaseBuilds false
        disable 'InvalidPackage'
        abortOnError false
    }

    signingConfigs {
        release {
            storeFile file("../wuliu.jks")
            storePassword "111111"
            keyAlias 'wuliu'
            keyPassword '111111'
        }
        debug {
        }
    }

    android.applicationVariants.all { variant ->
        apkReleaseAction(variant)
        variant.outputs.each { output ->
            if (output == null || output.zipAlign == null)
                return;
            output.zipAlign.doLast() {
                deleteUnalignApk(it)
            }
        }
    }

    dataBinding {
        enabled = true
    }

}

def apkReleaseAction(variant) {
    if (variant.outputs) {
        variant.outputs.each { output ->
            mvApkFile(variant, output.outputFile)
        }
    }
}

def getDate() {
    def date = new Date()
    def formatter = new SimpleDateFormat("MM-dd-HH-mm");
    return formatter.format(date)
}

def getGithash() {
    new ByteArrayOutputStream().withStream { result ->
        exec {
            executable = 'git'
            args = ['rev-parse', '--short', 'HEAD']
            standardOutput = result
        }
        return result.toString().trim()
    }
}

def getGitTag() {
    new ByteArrayOutputStream().withStream { result ->
        exec {
            workingDir '../Bash/'
            commandLine = './git_get_tag.sh'
            standardOutput = result
        }
        return result.toString().trim()
    }
}

def getGitMessage() {
    new ByteArrayOutputStream().withStream { result ->
        exec {
            executable = 'git'
            args = ['log', '--format=%B', '-n', '1', 'HEAD']
            standardOutput = result
        }
        return result.toString().trim()
    }
}

def mvApkFile(variant, outputFile) {
    def f = outputFile
    def msg = getGitMessage()
    def isServer = false
    def tag = getGitTag()
    if ((msg.contains(' -->Release') || isServer) && (!tag.equals('undefined'))) {
        def finalName = f.name.replace('.apk', "-Version-${variant.versionName}-Hash_${getGithash()}-Tag-${tag}-${getDate()}.apk")
        def releasePath = "${System.getProperty("user.home")}/Bumblebee/${variant.versionName}"
        def file = new File(releasePath);
        if (!file.exists()) {
            file.mkdir()
        }
        copy {
            from "$outputFile.path"
            into "$releasePath"
            rename("$outputFile.name", "BumblebeeRelease$finalName")
        }
    }
}

def deleteUnalignApk(it) {
    File file = file(it.inputFile)
    if (file.exists())
        file.delete()
}
